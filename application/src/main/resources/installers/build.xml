<!--

    Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements.  See the NOTICE file
    distributed with this work for additional information
    regarding copyright ownership.  The ASF licenses this file
    to you under the Apache License, Version 2.0 (the
    "License"); you may not use this file except in compliance
    with the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.


    CUSTOM This file has been modified to work with embedded JVMs
    - It adds a new build.xml to ${nbi.ext.dir}/infra/build/products/helloworld/build.xml} which fixes a bug in the .conf, used by the Linux installer, file and adds a jdkhome variable.
    - It modifies the nbi engine jar, replacing the classes TestJDK, CreateNativeLauncherAction and CommonLauncher, this allows the new JVM to be installed using JVM
    version information that is acceptable to the buggy windows launcher.
    - It builds both Linux and Windows bundles with embedded jre's. The windows bundle utilizes the CreateNativeLauncherAction features to embed version information
    into the native installer that will be acceptable to the buggy windows launcher.

-->
<project name="build installers" default="build" basedir=".">
    <property file="${basedir}/build.properties"/>
    <property file="${basedir}/custom.properties"/>


    <!-- CUSTOM properties -->
    <property name="no.clean" value="true"/> <!-- this aids in debugging -->

    <!-- ${basedir} is target/installarbuild -->
    <!-- Updated classes for nbi-engine.jar -->
    <property name="engine.jar" value="${basedir}/build/registry-temp/engine.jar"/>
    <property name="lying.testjdk.class" value="${basedir}/../classes/TestJDK.class"/>
    <property name="createnativelauncheraction.dir" value="org/netbeans/installer/wizard/components/actions"/>
    <property name="createnativelauncheraction.class" value="${basedir}/../classes/${createnativelauncheraction.dir}/CreateNativeLauncherAction.class"/>
    <property name="commonlauncher.dir" value="org/netbeans/installer/utils/system/launchers/impl"/>
    <property name="commonlauncher.class" value="${basedir}/../classes/${commonlauncher.dir}/CommonLauncher.class"/>
    <property name="jre.exe" value="${basedir}/../../src/main/resources/installers/jre.exe"/>
    <property name="jre-linux" value="${basedir}/../../src/main/resources/installers/jre-linux"/>
    <!-- this is only used for testing -->
    <property name="nlw.exe" value="${basedir}/../../src/main/resources/installers/nlw.exe"/>
    <!-- end CUSTOM -->


    <!-- echoproperties/ -->

    <target name="build" depends="init,-build,-generate-bundles,post-build"/>

    <target name="init" depends="-clean,-checkout,-init,-init-properties,-post-init-clean"/>

    <target name="-clean-cvs" unless="no.checkout">
        <delete dir="${nbi.all.dir}"/>
    </target>

    <target name="-clean" depends="-clean-cvs" unless="no.clean">
        <delete dir="${output.dir}"/>
        <delete dir="${nbi.ext.dir}/products/helloworld/build"/>
        <delete dir="${nbi.ext.dir}/products/helloworld/dist"/>
        <delete dir="${nbi.ext.dir}/engine/build"/>
        <delete dir="${nbi.ext.dir}/engine/dist"/>

        <!--<delete dir="${basedir}/cache"/>-->
    </target>

    <target name="post-build">
        <delete dir="${output.dir}/registry-temp"/>
    </target>

    <target name="-checkout">

        <copy todir="${nbi.all.dir}/.common">
            <fileset dir="${basedir}/.common"/>
        </copy>

        <copy todir="${nbi.ext.dir}">
            <fileset dir="${basedir}/ext">
            </fileset>
        </copy>

        <!-- CUSTOM FIXES -->

        <!-- This file fixes a bug in the unix .conf file and adds a jdkhome variable pointing at the embedded jvm -->
        <echo message="CUSTOM copying ../../src/main/resources/installers/build_helloworld_product.xml to ${nbi.ext.dir}/infra/build/products/helloworld/build.xml"/>
        <copy file="../../src/main/resources/installers/build_helloworld_product.xml"  tofile="${nbi.ext.dir}/infra/build/products/helloworld/build.xml" overwrite="true" />
        <echo message="CUSTOM done"/>

        <!-- END CUSTOM FIXES -->

    </target>

    <target name="-init">
        <taskdef
            name="if"
            classpath="${custom.tasks.cls}"
            classname="org.netbeans.installer.infra.build.ant.If"/>
        <taskdef
            name="for-each"
            classpath="${custom.tasks.cls}"
            classname="org.netbeans.installer.infra.build.ant.ForEach"/>
        <taskdef
            name="set"
            classpath="${custom.tasks.cls}"
            classname="org.netbeans.installer.infra.build.ant.SetProperty"/>

        <taskdef
            name="create-bundle"
            classpath="${custom.tasks.cls}"
            classname="org.netbeans.installer.infra.build.ant.registries.CreateBundle"/>

        <delete file="${temp.file}"/>
    </target>

    <target name="-init-properties">
        <echo file="${nbi.all.dir}/environment.tmp" encoding="utf-8">
            checkout.sources=false
            sources.dir=${nbi.all.dir}
            cvs.module=ext

            release.to.server=false
            release.registry.dir=${output.dir}/registry-temp

            dont.build.custom.tasks=true
            custom.tasks.cls=${custom.tasks.cls}

            build.engine=false

            engine.dist.file.name=nbi-engine.jar
            engine.dist.file=${nbi.core.dir}/infra/build/engine/dist/nbi-engine.jar

            packaged.data.dir=${basedir}/cache/packaged
            downloads.cache.dir=${basedir}/cache/raw

            jarsigner.enabled=${jarsigner.enabled}
        </echo>
        <replace file="${nbi.all.dir}/environment.tmp" token="\" value="/" encoding="utf-8"/>
        <native2ascii src="${nbi.all.dir}" dest="${nbi.all.dir}" encoding="utf-8" includes="environment.tmp" ext=".properties"/>
    </target>

    <target name="-post-init-clean">
        <delete dir="${basedir}/cache/raw"/>
    </target>

    <target name="-build">
        <delete dir="${output.dir}"/>

        <mkdir dir="${output.dir}"/>
        <mkdir dir="${bundles.release.dir}"/>
        <mkdir dir="${output.dir}/components"/>

        <property name="engine.dist.file.name" value="nbi-engine.jar"/>


        <echo message="BUILDING HELLOWORLD EXT ENGINE =================================="/>
        <ant dir="${nbi.ext.dir}/infra/build/engine" target="release-all">
            <property
                name="basedir"
                value="${nbi.ext.dir}/infra/build/engine"/>
            <property
                name="environment.properties"
                value="${environment.properties}"/>

            <property
                name="core.engine.dist.file"
                value="${nbi.engine.jar}"/>
        </ant>

        <!-- CUSTOM -->
        <for-each property="platform" list="${target.platforms}" separator=" ">
            <!-- This block will modify the engine jar file with the new files that will enable the native windows launcher to work
            while these changes should not impact hte linux installer, its' best if it appears first in the pom so tht it will run
            with a vanilla engine.jar -->
            <if property="platform" value="windows">
                <if property="hackEngineJar" value="true">
                    <echo message="CUSTOM Updating nbi-engine.jar with new classes" />
                    <echo message="CUSTOM extracting contents of jar to engine-extract" />
                    <delete dir="engine-extract"/>
                    <mkdir dir="engine-extract"/>
                    <unjar src="${engine.jar}" dest="engine-extract">
                        <patternset>
                            <include name="native/launcher/windows/*"/>
                        </patternset>
                    </unjar>
                    <echo message="CUSTOM copying ${lying.testjdk.class} to engine-extract/org/netbeans/installer/utils/applications" />
                    <copy file="${lying.testjdk.class}" todir="engine-extract/org/netbeans/installer/utils/applications" />
                    <echo message="CUSTOM creating engine-extract/org/netbeans/installer/utils/applications/COPIED_TESTJDK in engine-extract/org/netbeans/installer/utils/applications" />
                    <touch file="engine-extract/org/netbeans/installer/utils/applications/COPIED_TESTJDK" />
                    <copy file="${lying.testjdk.class}" todir="engine-extract/org/netbeans/installer/utils/applications" />

                    <copy file="${commonlauncher.class}" todir="engine-extract/${commonlauncher.dir}" />
                    <touch file="engine-extract/${commonlauncher.dir}/UPDATED_COMMONLAUNCHER" />
                    <copy file="${createnativelauncheraction.class}" todir="engine-extract/${createnativelauncheraction.dir}"/>
                    <touch file="engine-extract/${createnativelauncheraction.dir}/UPDATED_CREATEDNATIVELAUNCHER" />

                    <echo message="CUSTOM updating jar ${engine.jar} with contents of engine-extract" />
                    <jar destfile="${engine.jar}"  update="yes">
                        <zipfileset dir="engine-extract" />
                    </jar>
                </if>
                <if property="testWindowsLauncher" value="true">
                    <echo message="CUSTOM Updating nbi-engine.jar with new launcher" />
                    <echo message="CUSTOM extracting contents of jar to engine-extract" />
                    <delete dir="engine-extract"/>
                    <mkdir dir="engine-extract"/>
                    <unjar src="${engine.jar}" dest="engine-extract">
                        <patternset>
                            <include name="native/launcher/windows/*"/>
                        </patternset>
                    </unjar>
                    <echo message="CUSTOM updating jar ${engine.jar} with nlw.exe" />
                    <copy file="${nlw.exe}" todir="engine-extract/native/launcher/windows"/>
                    <touch file="engine-extract/native/launcher/windows/UPDATED_NLW" />
                    <jar destfile="${engine.jar}"  update="yes">
                        <zipfileset dir="engine-extract" />
                    </jar>
                </if>
            </if>
        </for-each>

        <!-- so this created a jar build/registry-temp/engine.jar that has TestJdk.jar in org.netbeans.installer.utils.applications
        We would like to replace that (I feel like I'm writing a virus). -->
        <echo message="BUILDING HELLOWORLD PRODUCT =================================="/>
        <ant dir="${nbi.ext.dir}/infra/build/products/helloworld" target="release-all">
            <property
                name="basedir"
                value="${nbi.ext.dir}/infra/build/products/helloworld"/>
            <property
                name="environment.properties"
                value="${environment.properties}"/>
            <property
                name="dist.dir"
                value="${output.dir}/components"/>

            <property
                name="release.parent.uid"
                value=""/>
            <property
                name="release.parent.version"
                value=""/>
            <property
                name="release.parent.platforms"
                value=""/>

            <property
                name="engine.dist.file"
                value="${output.dir}/registry-temp/engine.jar"/>
        </ant>

    </target>

    <target name="-generate-bundles">
        <echo message="CUSTOM platforms = ${target.platforms}"/>
        <for-each property="platform" list="${target.platforms}" separator=" ">
            <echo message="CUSTOM platform = ${platform}"/>

            <condition property="bundle.extention.${platform}" value="exe">
                <contains string="${platform}" substring="windows"/>
            </condition>
            <condition property="bundle.extention.${platform}" value="sh">
                <or>
                    <contains string="${platform}" substring="linux"/>
                    <contains string="${platform}" substring="solaris"/>
                </or>
            </condition>
            <condition property="bundle.extention.${platform}" value="zip">
                <contains string="${platform}" substring="macosx"/>
            </condition>

            <set property="bundle.extention" source="bundle.extention.${platform}"/>

            <if property="platform" value="windows">
                <if property="includeJRE" value="true">
                    <if property="hackEngineJar" value="true">
                        <echo message="CUSTOM Building Windows Installer with embedded JRE and modified engine"/>
                        <create-bundle root="${output.dir}/registry-temp"
                                       platform="${platform}"
                                       keepTempBundles="true"
                                       target="${bundles.release.dir}/${bundle.files.prefix}-${platform}.${bundle.extention}">
                            <component uid="${main.product.uid}" version="1.0.0.0.0"/>
                            <property name="nbi.bundled.jvm.file" value="${jre.exe}"/>

                            <!--  Format
                            <property name="nbi.windows.compatible.jvm" value="minVersion=11,maxVersion=14,vendor=AdoptOpenJDK,osName=Windows 10,osArch=amd64"/>
                            -->
                            <property name="nbi.windows.compatible.jvm" value="minVersion=1.8,maxVersion=1.8.500"/>
                        </create-bundle>
                    </if>
                    <if property="hackEngineJar" value="false">
                        <echo message="CUSTOM Building Windows Installer with embedded JRE and unmodified engine"/>
                        <create-bundle root="${output.dir}/registry-temp"
                                       platform="${platform}"
                                       keepTempBundles="true"
                                       target="${bundles.release.dir}/${bundle.files.prefix}-${platform}.${bundle.extention}">
                            <component uid="${main.product.uid}" version="1.0.0.0.0"/>
                            <property name="nbi.bundled.jvm.file" value="${jre.exe}"/>
                        </create-bundle>
                    </if>
                </if>
                <if property="includeJRE" value="false">
                    <echo message="CUSTOM Building Windows Installer without JRE and unmodified engine"/>
                    <create-bundle root="${output.dir}/registry-temp"
                                   platform="${platform}"
                                   keepTempBundles="true"
                                   target="${bundles.release.dir}/${bundle.files.prefix}-${platform}.${bundle.extention}">
                        <component uid="${main.product.uid}" version="1.0.0.0.0"/>
                    </create-bundle>
                </if>
            </if>

            <if property="platform" value="linux">
                <if property="includeJRE" value="true">
                    <echo message="CUSTOM Building Linux Installer with embedded JRE"/>
                    <create-bundle root="${output.dir}/registry-temp"
                                   platform="${platform}"
                                   target="${bundles.release.dir}/${bundle.files.prefix}-${platform}.${bundle.extention}">
                        <component uid="${main.product.uid}" version="1.0.0.0.0"/>
                        <property name="nbi.bundled.jvm.file" value="${jre-linux}"/>
                    </create-bundle>
                </if>
                <if property="includeJRE" value="false">
                    <echo message="CUSTOM Building Linux Installer without embedded JRE"/>
                    <create-bundle root="${output.dir}/registry-temp"
                                   platform="${platform}"
                                   target="${bundles.release.dir}/${bundle.files.prefix}-${platform}.${bundle.extention}">
                        <component uid="${main.product.uid}" version="1.0.0.0.0"/>
                    </create-bundle>
                </if>
            </if>


            <!--
<echo message="CUSTOM Building Installer for ${target.platform}"/>
<create-bundle root="${output.dir}/registry-temp"
               platform="${platform}"
               target="${bundles.release.dir}/${bundle.files.prefix}-${platform}.${bundle.extention}">
    <component uid="${main.product.uid}" version="1.0.0.0.0"/>
</create-bundle>
            -->
        <!-- CUSTOM -->

            <if property="bundle.extention" value="zip">
                <antcall target="zip-to-tgz">
                    <param name="input.file"  value="${bundles.release.dir}/${bundle.files.prefix}-${platform}.zip"/>
                    <param name="output.file" value="${bundles.release.dir}/${bundle.files.prefix}-${platform}.tgz"/>
                </antcall>
                <delete file="${bundles.release.dir}/${bundle.files.prefix}-${platform}.zip"/>
            </if>
        </for-each>
        <echo>Installer(s) for [${target.platforms}] are available at ${bundles.release.dir}</echo>
    </target>

    <target name="zip-to-tgz">
        <set property="tar.tmpdir"
             value="${bundles.release.dir}/tempdir"/>

        <mkdir dir="${tar.tmpdir}"/>

        <unzip
            src="${input.file}"
            dest="${tar.tmpdir}"/>

        <tar tarfile="${output.file}"
             compression="gzip">
            <tarfileset dir="${tar.tmpdir}" mode="644">
                <include name="**/*.*"/>
                <exclude name="**/executable"/>
            </tarfileset>
            <tarfileset dir="${tar.tmpdir}" mode="755">
                <include name="**/executable"/>
            </tarfileset>
        </tar>
        <delete dir="${tar.tmpdir}"/>
    </target>

</project>
